(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-image-zoom', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory(global['ngx-image-zoom'] = {}, global.ng.core, global.ng.common));
}(this, (function (exports, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var NgxImageZoomComponent = /** @class */ (function () {
        function NgxImageZoomComponent(renderer) {
            this.renderer = renderer;
            this.zoomScroll = new core.EventEmitter();
            this.zoomPosition = new core.EventEmitter();
            this.enableLens = false;
            this.lensBorderRadius = 0;
            this.lensWidth = 100;
            this.lensHeight = 100;
            this.zoomMode = 'hover';
            this.magnification = 1;
            this.enableScrollZoom = false;
            this.scrollStepSize = 0.1;
            this.circularLens = false;
            this.maxZoomRatio = 2;
            this.zoomingEnabled = false;
            this.zoomFrozen = false;
            this.isReady = false;
            this.thumbImageLoaded = false;
            this.fullImageLoaded = false;
            this.eventListeners = [];
        }
        NgxImageZoomComponent_1 = NgxImageZoomComponent;
        Object.defineProperty(NgxImageZoomComponent.prototype, "setThumbImage", {
            set: function (thumbImage) {
                this.thumbImageLoaded = false;
                this.isReady = false;
                this.thumbImage = thumbImage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxImageZoomComponent.prototype, "setFullImage", {
            set: function (fullImage) {
                this.fullImageLoaded = false;
                this.isReady = false;
                this.fullImage = fullImage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxImageZoomComponent.prototype, "setZoomMode", {
            set: function (zoomMode) {
                if (NgxImageZoomComponent_1.validZoomModes.some(function (m) { return m === zoomMode; })) {
                    this.zoomMode = zoomMode;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxImageZoomComponent.prototype, "setMagnification", {
            set: function (magnification) {
                this.magnification = Number(magnification) || this.magnification;
                this.zoomScroll.emit(this.magnification);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxImageZoomComponent.prototype, "setMinZoomRatio", {
            set: function (minZoomRatio) {
                var ratio = Number(minZoomRatio) || this.minZoomRatio || this.baseRatio || 0;
                this.minZoomRatio = Math.max(ratio, this.baseRatio || 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxImageZoomComponent.prototype, "setMaxZoomRatio", {
            set: function (maxZoomRatio) {
                this.maxZoomRatio = Number(maxZoomRatio) || this.maxZoomRatio;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxImageZoomComponent.prototype, "setScrollStepSize", {
            set: function (stepSize) {
                this.scrollStepSize = Number(stepSize) || this.scrollStepSize;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxImageZoomComponent.prototype, "setEnableLens", {
            set: function (enable) {
                this.enableLens = Boolean(enable);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxImageZoomComponent.prototype, "setLensWidth", {
            set: function (width) {
                this.lensWidth = Number(width) || this.lensWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxImageZoomComponent.prototype, "setLensHeight", {
            set: function (height) {
                this.lensHeight = Number(height) || this.lensHeight;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxImageZoomComponent.prototype, "setCircularLens", {
            set: function (enable) {
                this.circularLens = Boolean(enable);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxImageZoomComponent.prototype, "setEnableScrollZoom", {
            set: function (enable) {
                this.enableScrollZoom = Boolean(enable);
            },
            enumerable: true,
            configurable: true
        });
        NgxImageZoomComponent.prototype.ngOnInit = function () {
            this.setUpEventListeners();
        };
        NgxImageZoomComponent.prototype.ngOnChanges = function () {
            if (this.enableLens) {
                if (this.circularLens) {
                    this.lensBorderRadius = this.lensWidth / 2;
                }
                else {
                    this.lensBorderRadius = 0;
                }
            }
            this.calculateRatioAndOffset();
            this.calculateImageAndLensPosition();
        };
        NgxImageZoomComponent.prototype.ngOnDestroy = function () {
            this.eventListeners.forEach(function (destroyFn) { return destroyFn(); });
        };
        /**
         * Template helper methods
         */
        NgxImageZoomComponent.prototype.onThumbImageLoaded = function () {
            this.thumbImageLoaded = true;
            this.checkImagesLoaded();
        };
        NgxImageZoomComponent.prototype.onFullImageLoaded = function () {
            this.fullImageLoaded = true;
            this.checkImagesLoaded();
        };
        NgxImageZoomComponent.prototype.setUpEventListeners = function () {
            var _this = this;
            if (this.zoomMode === 'hover') {
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseenter', function (event) { return _this.hoverMouseEnter(event); }));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', function () { return _this.hoverMouseLeave(); }));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', function (event) { return _this.hoverMouseMove(event); }));
            }
            else if (this.zoomMode === 'toggle') {
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', function (event) { return _this.toggleClick(event); }));
            }
            else if (this.zoomMode === 'click') {
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', function (event) { return _this.clickStarter(event); }));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', function () { return _this.clickMouseLeave(); }));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', function (event) { return _this.clickMouseMove(event); }));
            }
            else if (this.zoomMode === 'hover-freeze') {
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseenter', function (event) { return _this.hoverFreezeMouseEnter(event); }));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mouseleave', function () { return _this.hoverFreezeMouseLeave(); }));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousemove', function (event) { return _this.hoverFreezeMouseMove(event); }));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'click', function (event) { return _this.hoverFreezeClick(event); }));
            }
            if (this.enableScrollZoom) {
                // Chrome: 'mousewheel', Firefox: 'DOMMouseScroll', IE: 'onmousewheel'
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'mousewheel', function (event) { return _this.onMouseWheel(event); }));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'DOMMouseScroll', function (event) { return _this.onMouseWheel(event); }));
                this.eventListeners.push(this.renderer.listen(this.zoomContainer.nativeElement, 'onmousewheel', function (event) { return _this.onMouseWheel(event); }));
            }
            if (this.enableLens && this.circularLens) {
                this.lensBorderRadius = this.lensWidth / 2;
            }
        };
        NgxImageZoomComponent.prototype.checkImagesLoaded = function () {
            this.calculateRatioAndOffset();
            if (this.thumbImageLoaded && this.fullImageLoaded) {
                this.calculateImageAndLensPosition();
                this.isReady = true;
            }
        };
        /**
         * Zoom position setters
         */
        NgxImageZoomComponent.prototype.setZoomPosition = function (left, top) {
            this.latestMouseLeft = Number(left) || this.latestMouseLeft;
            this.latestMouseTop = Number(top) || this.latestMouseTop;
            var c = {
                x: this.latestMouseLeft,
                y: this.latestMouseTop
            };
            this.zoomPosition.emit(c);
        };
        /**
         * Mouse wheel event
         */
        NgxImageZoomComponent.prototype.onMouseWheel = function (event) {
            // Don't eat events if zooming isn't active
            if (!this.zoomingEnabled || this.zoomFrozen) {
                return;
            }
            event = window.event || event; // old IE
            var direction = Math.max(Math.min((event.wheelDelta || -event.detail), 1), -1);
            if (direction > 0) {
                // up
                this.setMagnification = Math.min(this.magnification + this.scrollStepSize, this.maxZoomRatio);
            }
            else {
                // down
                this.setMagnification = Math.max(this.magnification - this.scrollStepSize, this.minZoomRatio);
            }
            this.calculateRatio();
            this.calculateZoomPosition(event);
            // Prevent scrolling on page.
            event.returnValue = false; // IE
            if (event.preventDefault) {
                event.preventDefault(); // Chrome & FF
            }
        };
        /**
         * Hover mode
         */
        NgxImageZoomComponent.prototype.hoverMouseEnter = function (event) {
            this.zoomOn(event);
        };
        NgxImageZoomComponent.prototype.hoverMouseLeave = function () {
            this.zoomOff();
        };
        NgxImageZoomComponent.prototype.hoverMouseMove = function (event) {
            this.calculateZoomPosition(event);
        };
        /**
         * Toggle mode
         */
        NgxImageZoomComponent.prototype.toggleClick = function (event) {
            if (this.zoomingEnabled) {
                this.zoomOff();
            }
            else {
                this.zoomOn(event);
            }
        };
        /**
         * Click mode
         */
        NgxImageZoomComponent.prototype.clickStarter = function (event) {
            if (this.zoomingEnabled === false) {
                this.zoomOn(event);
            }
        };
        NgxImageZoomComponent.prototype.clickMouseLeave = function () {
            this.zoomOff();
        };
        NgxImageZoomComponent.prototype.clickMouseMove = function (event) {
            if (this.zoomingEnabled) {
                this.calculateZoomPosition(event);
            }
        };
        /**
         * Hover freeze mode
         */
        NgxImageZoomComponent.prototype.hoverFreezeMouseEnter = function (event) {
            if (this.zoomingEnabled && !this.zoomFrozen) {
                this.zoomOn(event);
            }
        };
        NgxImageZoomComponent.prototype.hoverFreezeMouseLeave = function () {
            if (this.zoomingEnabled && !this.zoomFrozen) {
                this.zoomOff();
            }
        };
        NgxImageZoomComponent.prototype.hoverFreezeMouseMove = function (event) {
            if (this.zoomingEnabled && !this.zoomFrozen) {
                this.calculateZoomPosition(event);
            }
        };
        NgxImageZoomComponent.prototype.hoverFreezeClick = function (event) {
            if (this.zoomingEnabled && this.zoomFrozen) {
                this.zoomFrozen = false;
                this.zoomOff();
            }
            else if (this.zoomingEnabled) {
                this.zoomFrozen = true;
            }
            else {
                this.zoomOn(event);
            }
        };
        /**
         * Private helper methods
         */
        NgxImageZoomComponent.prototype.zoomOn = function (event) {
            if (this.isReady) {
                this.zoomingEnabled = true;
                this.calculateRatioAndOffset();
                this.display = 'block';
                this.calculateZoomPosition(event);
            }
        };
        NgxImageZoomComponent.prototype.zoomOff = function () {
            this.zoomingEnabled = false;
            this.display = 'none';
        };
        NgxImageZoomComponent.prototype.calculateZoomPosition = function (event) {
            var newLeft = Math.max(Math.min(event.offsetX, this.thumbWidth), 0);
            var newTop = Math.max(Math.min(event.offsetY, this.thumbHeight), 0);
            this.setZoomPosition(newLeft, newTop);
            this.calculateImageAndLensPosition();
        };
        NgxImageZoomComponent.prototype.calculateImageAndLensPosition = function () {
            var lensLeftMod = 0;
            var lensTopMod = 0;
            if (this.enableLens) {
                lensLeftMod = this.lensLeft = this.latestMouseLeft - this.lensWidth / 2;
                lensTopMod = this.lensTop = this.latestMouseTop - this.lensHeight / 2;
            }
            this.fullImageLeft = (this.latestMouseLeft * -this.xRatio) - lensLeftMod;
            this.fullImageTop = (this.latestMouseTop * -this.yRatio) - lensTopMod;
        };
        NgxImageZoomComponent.prototype.calculateRatioAndOffset = function () {
            this.thumbWidth = this.imageThumbnail.nativeElement.width;
            this.thumbHeight = this.imageThumbnail.nativeElement.height;
            // If lens is disabled, set lens size to equal thumb size and position it on top of the thumb
            if (!this.enableLens) {
                this.lensWidth = this.thumbWidth;
                this.lensHeight = this.thumbHeight;
                this.lensLeft = 0;
                this.lensTop = 0;
            }
            // getBoundingClientRect() ? https://stackoverflow.com/a/44008873
            this.offsetTop = this.imageThumbnail.nativeElement.getBoundingClientRect().top;
            this.offsetLeft = this.imageThumbnail.nativeElement.getBoundingClientRect().left;
            if (this.fullImage === undefined) {
                this.fullImage = this.thumbImage;
            }
            if (this.fullImageLoaded) {
                this.fullWidth = this.fullSizeImage.nativeElement.naturalWidth;
                this.fullHeight = this.fullSizeImage.nativeElement.naturalHeight;
                this.baseRatio = Math.max((this.thumbWidth / this.fullWidth), (this.thumbHeight / this.fullHeight));
                // Don't allow zooming to smaller than thumbnail size
                this.minZoomRatio = Math.max(this.minZoomRatio || 0, this.baseRatio || 0);
                this.calculateRatio();
            }
        };
        NgxImageZoomComponent.prototype.calculateRatio = function () {
            this.magnifiedWidth = (this.fullWidth * this.magnification);
            this.magnifiedHeight = (this.fullHeight * this.magnification);
            this.xRatio = (this.magnifiedWidth - this.thumbWidth) / this.thumbWidth;
            this.yRatio = (this.magnifiedHeight - this.thumbHeight) / this.thumbHeight;
        };
        var NgxImageZoomComponent_1;
        NgxImageZoomComponent.validZoomModes = ['hover', 'toggle', 'click', 'hover-freeze'];
        NgxImageZoomComponent.ctorParameters = function () { return [
            { type: core.Renderer2 }
        ]; };
        __decorate([
            core.ViewChild('zoomContainer', { static: true })
        ], NgxImageZoomComponent.prototype, "zoomContainer", void 0);
        __decorate([
            core.ViewChild('imageThumbnail', { static: true })
        ], NgxImageZoomComponent.prototype, "imageThumbnail", void 0);
        __decorate([
            core.ViewChild('fullSizeImage', { static: true })
        ], NgxImageZoomComponent.prototype, "fullSizeImage", void 0);
        __decorate([
            core.Output()
        ], NgxImageZoomComponent.prototype, "zoomScroll", void 0);
        __decorate([
            core.Output()
        ], NgxImageZoomComponent.prototype, "zoomPosition", void 0);
        __decorate([
            core.Input('thumbImage')
        ], NgxImageZoomComponent.prototype, "setThumbImage", null);
        __decorate([
            core.Input('fullImage')
        ], NgxImageZoomComponent.prototype, "setFullImage", null);
        __decorate([
            core.Input('zoomMode')
        ], NgxImageZoomComponent.prototype, "setZoomMode", null);
        __decorate([
            core.Input('magnification')
        ], NgxImageZoomComponent.prototype, "setMagnification", null);
        __decorate([
            core.Input('minZoomRatio')
        ], NgxImageZoomComponent.prototype, "setMinZoomRatio", null);
        __decorate([
            core.Input('maxZoomRatio')
        ], NgxImageZoomComponent.prototype, "setMaxZoomRatio", null);
        __decorate([
            core.Input('scrollStepSize')
        ], NgxImageZoomComponent.prototype, "setScrollStepSize", null);
        __decorate([
            core.Input('enableLens')
        ], NgxImageZoomComponent.prototype, "setEnableLens", null);
        __decorate([
            core.Input('lensWidth')
        ], NgxImageZoomComponent.prototype, "setLensWidth", null);
        __decorate([
            core.Input('lensHeight')
        ], NgxImageZoomComponent.prototype, "setLensHeight", null);
        __decorate([
            core.Input('circularLens')
        ], NgxImageZoomComponent.prototype, "setCircularLens", null);
        __decorate([
            core.Input('enableScrollZoom')
        ], NgxImageZoomComponent.prototype, "setEnableScrollZoom", null);
        NgxImageZoomComponent = NgxImageZoomComponent_1 = __decorate([
            core.Component({
                selector: 'lib-ngx-image-zoom',
                template: "<div #zoomContainer class=\"ngxImageZoomContainer\"\n     [style.width.px]=\"this.thumbWidth\" [style.height.px]=\"this.thumbHeight\">\n\n  <img #imageThumbnail class=\"ngxImageZoomThumbnail\" [src]=\"thumbImage\" (load)=\"onThumbImageLoaded()\"/>\n\n  <div [ngClass]=\"{'ngxImageZoomFullContainer': true, 'ngxImageZoomLensEnabled': this.enableLens}\"\n       [style.display]=\"this.display\"\n       [style.top.px]=\"this.lensTop\"\n       [style.left.px]=\"this.lensLeft\"\n       [style.width.px]=\"this.lensWidth\"\n       [style.height.px]=\"this.lensHeight\"\n       [style.border-radius.px]=\"this.lensBorderRadius\"\n  >\n    <img #fullSizeImage class=\"ngxImageZoomFull\" [src]=\"fullImage\"\n         (load)=\"onFullImageLoaded()\"\n         [style.display]=\"this.display\"\n         [style.top.px]=\"this.fullImageTop\"\n         [style.left.px]=\"this.fullImageLeft\"\n         [style.width.px]=\"this.magnifiedWidth\"\n         [style.height.px]=\"this.magnifiedHeight\"\n    />\n  </div>\n</div>\n",
                styles: [".ngxImageZoomContainer{position:relative;margin:auto;overflow:hidden;pointer-events:none}.ngxImageZoomThumbnail{pointer-events:all}.ngxImageZoomFull{position:absolute;max-width:none;max-height:none;display:none;pointer-events:none}.ngxImageZoomFullContainer{position:absolute;overflow:hidden;pointer-events:none}.ngxImageZoomFullContainer.ngxImageZoomLensEnabled{border:2px solid red;cursor:crosshair;pointer-events:none}"]
            })
        ], NgxImageZoomComponent);
        return NgxImageZoomComponent;
    }());

    var NgxImageZoomModule = /** @class */ (function () {
        function NgxImageZoomModule() {
        }
        NgxImageZoomModule = __decorate([
            core.NgModule({
                declarations: [
                    NgxImageZoomComponent,
                ],
                imports: [
                    common.CommonModule,
                ],
                exports: [
                    NgxImageZoomComponent
                ]
            })
        ], NgxImageZoomModule);
        return NgxImageZoomModule;
    }());

    exports.NgxImageZoomComponent = NgxImageZoomComponent;
    exports.NgxImageZoomModule = NgxImageZoomModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-image-zoom.umd.js.map
